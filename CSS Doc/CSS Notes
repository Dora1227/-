CSS学习笔记
一、HTML标记和与文档结构
HTML（Hypertext Markup Language）超文本标记语言，CSS是为了给HTML添加样式的，所以先了解HTML标记的基础，才能更精准的设置CSS。
HTML标记基础是：对每个包含内容的元素，根据其内容是否属于文本，有两种不同的方式加标记，一种是闭合标签（<p></p>），一种是自闭合标签（如：<img />）
HTML文档结构是以<!DOCTYPE Html>开始，表明接下来是一个html文档，需要注意的是：这个标签不需要关闭。
HTML中注释的标签是：<!-- 注释内容 -->。HTML是根据标记出现的顺序，依次在页面自上向下的文档流方式渲染页面。一般使用块级元素和行内元素构建页面，块级元素会占据一整行的位置，行内元素会根据内容的宽度占据位置。一般的块级元素有：<p><h1>(所有字体大小标记)<div><ul><ol>等，行内元素有：<a><img><em><strong><span>等。两个标记中可以嵌套元素。
对于HTML5中有新增部分标记，更方便编写代码，对于一些特殊字符的使用，推荐编写HTML实体。HTML实体的写法是：和号（&）开头，分号（；）结尾，中间编写表示实体的字符串，如双引号”&ldquo;”(left-double-quote)，”&rdquo;”(right-double-quote)。如要输入和号（&），需要写成”&amp;”，因为&是表示写HTML实体开头的特殊字符，所以需要用实体方法编写，不能直接写和号（&）。
二、CSS工作原理
（一）CSS规则
1、样式规则
为文档添加样式主要有三种方法，分别是：行内样式（通过style属性写在标签内），嵌套样式（在head标签内添加并写在<style>标签内），链接样式（单独写在.css文件中，通过<link href=””>标签引入）。
其中嵌套样式是将所有的样式代码写在一个扩展名为.css格式的文本文件中，也叫样式表，在样式表中也可以链接其他样式表，就是应用@import 指令（一种@规则）：@import url(css/index.css)。需要注意的是，使用@import指令需要在样式表中其他样式之前，否则将不会被引用。
2、命名规则
CSS命名是通过两部分组成：选择符和声明，声明又由属性和值组成。如：p{color:red;}，p是选择符，{}花括号内的是声明，花括号表示一条规则。
根据这一规则，可以扩展出三种方法：
(1)多个声明包含在一个规则中:p{color:red;font-size:14px;line-height:28px}
(2)多个选择符组合在一起：h1,h2,h3{color:gray;line-height:28px;}
(3)多个规则应用给一个选择符：h1,h2{color:green;line-height:30px},h2{ font-style:italic }，除了一起设置的样式，还单独设置了h2的倾斜样式。
（二）CSS选择符
所有用于选择特定元素的选择符分为三种：上下文选择符，ID和类选择符，属性选择符。
1、上下文选择符
上下文选择符格式是：标签1 标签2{声明}（div p {color:red}），这个说明只有在标签1下面的标签2才会引用该样式设置。
上下文选择符按照CSS规则标准来讲是后代组合选择符，就是一组以空格间隔的标签名，用于选择作为指定祖先元素后代的标签。
上下文选择符是以某个祖先标签作为上下文，只要选择的标签在层次结构上游存在这个祖先标签，就会选中该标签，不论该标签与祖先标签之间间隔多少层。如果需要根据父元素或同胞元素指定标签，需要用到特殊的上下文选择符。
2、特殊的上下文选择符
<section>
   <h2>An H2 Heading</h2>
   <p>This is paragraph 1</p>
   <p>Paragraph 2 has <a href="#">a link</a> in it.</p>
    <a href="#">Link</a>
</section>
（1）子选择符
标签1 > 标签2（section > p{color:red}，必须是section的直接子元素p才会渲染文字颜色为红色）。
标签2 必须是标签1 的子元素，或者反过来说，标签1 必须是标签2 的父元素。与常规的上下文选择符不同，这个选择符中的标签1 不能是标签2 的父元素之外的其他祖先元素。
（2）紧邻同胞选择符
标签1 + 标签2（h2 + p {color:gray;},只有第一个p标签元素会被渲染为灰色）。
标签2 必须紧跟在其同胞标签1 的后面的元素才有效果，如果选择了a标签，a标签的内容不会渲染。
（3）一般同胞选择符
标签1 ~ 标签2（h2 ~ a {color:red;}，只有h2后面的同级元素a标签内容会渲染为红色，p标签中的a标签内容不会被渲染）。
标签2 必须跟（不一定紧跟）在其同胞标签1 后面。

（4）通配符*
通配符*可以匹配任何元素，格式： * {声明}，如:*{color:red;}。
通配符还能操作元素的子元素样式设置,格式：选择符 * {声明}，如：p * {color：red}，这个样式设置会将p标签包含的所有标签的文本设置为红色，但是不包含p标签本身包含的文本。如：<p>测试<span>我是p的子元素</span></p>中，“测试”两字不会变红，“我是P的子元素”会变红色。
操作元素的孙子元素，而非子元素的样式设置，格式：选择符 * 选择符{声明}。如：section * a{color:pink}，参照上例，所有section下的孙子元素标签为a的包含的文本颜色会变为粉色。而子元素为a标签的不受影响，但是曾孙子元素一样受影响。
3、ID和类选择符
（1）类属性
类属性就是HTML中的class属性，在body中任何HTML元素都可以添加class属性。根据类属性可以有多种选择符方式。
A、	类选择符
类选择符就是类名前面加英文句号（.），如：.panel{color:red}
B、	标签带类选择符
标签带类选择符就是在标签后面添加类选择符，且两者之间不需要空格。如：p.panel{color:red}。意思为标签为p元素，且class属性中包含panel类，其文本内容设置颜色为红色。
C、	多类选择符
多类选择符是指在HTML元素上class属性可以添加多个类名，用空格隔开，但是最终渲染结果会根据样式优先级来渲染。如：class=”panel textWords spanColor ”三个类名。需要注意的是，在编写类样式时，如果两个类之间没有空格隔开则代表选择对同时有这两个类的元素进行渲染，如：.panel.spanColor {font-size: 16px;} .textWords {font-size:12px;}，表示在HTML元素上如果一个标签同时有这两个类（<div class="panel spanColor textWords">同时选择两个类的渲染</div>），则会将字体设置为16px，即使textWords设置的字体是12px，因为双类定位优先级高于单类。
（2）ID属性
ID属性的选择符和类属性选择符格式一样，只是写法不一样，ID选择符写法是：#ID名{声明}，如：#panel{color:red;}，表示id属性为panel的标签元素。ID选择符也能通过标签带id属性设置，如:p#panel{color:red;}。
ID属性也能用于页内导航，运用a标签的href属性链接跳转，如：
<a href="#panel">Link</a>
<div id="panel" class="panel spanColor textWords">同时选择两个类的渲染</div>
点击Link，跳转到div标签处。
4、属性选择符
属性选择符是基于HTML标签元素的属性也来选择。属性选择符有多种选择方式。
（1）属性名选择符
格式：标签名[属性名]。如img[title] { border: 1px solid #000;}，表示img标签中包含title属性的元素会添加1px的黑色边框。
（2）属性值选择符
格式：标签名[属性名]。如input[type="text"]{border:1px solid pink;}，表示input类别为text的文本输入框会添加1px的粉色边框。

5、伪类
伪类这个叫法源自它们与类相似，但实际上并没有类会附加到标记中的标签上。伪类分两种：UI伪类，结构化伪类。
UI伪类：当元素在HTML中处于某种状态时，伪类会为该元素添加CSS样式。如：鼠标悬停于链接上时，可添加a:hover{}伪类。
结构化伪类：当元素在HTML中处于结构结构上的关系时，会为相应元素添加CSS样式。如：某个元素是一组元素中的第一个或最后一个，可添加p:first-child {}  p:last-child {}。
伪类的编写有添加一个冒号:，也有两个冒号::，两个冒号是CSS3新增的新伪类元素，推荐使用双冒号，单冒号以后是淘汰。
（1）UI伪类
UI伪类最常用的就是链接伪类，通过鼠标悬停操作对a标签进行渲染。
A、	链接伪类
链接伪类一共有四个：a:link{}（未点击时默认链接样式），a:hover{}（鼠标悬停时样式），a:active{}（鼠标点击时样式，鼠标未释放），a:visted{}（鼠标点击后样式）。
B、	:focus伪类
这个伪类应用于有焦点的元素，但是CSS没有定义哪些元素有焦点，所以一般应用于表单中的文本元素，如input，textarea等元素。
C、	:target伪类
这个伪类应用于用户点击指向同一页面中其他元素的时候，这个元素就是目标元素，可用:target伪类选中设置它。如：
#more_info:target {background: #eee;}
<a href="#more_info"> More Information</a>
<h2 id="more_info">This is the information you are looking for.</h2>
点击跳转时，h2会添加一个浅灰色背景色。
    

（2）结构化伪类
结构化伪类根据标记结构化应用样式，比如定位某元素中的第一个或最后
个元素。
A、	:first-child和:last-child
分别用来定位元素中第一个和最后一个元素，如：
<ol class="results">
            <li>My Fast Pony</li>
            <li>Steady Trotter</li>
            <li>Slow Ol' Nag</li>
        </ol>，
ol.results li:first-child {color: blue; }。
B、	:nth-child伪类
该伪类一般用于提高表格的可读性，格式：:nth-child(n)，n表示数值，也可用odd或even来表示，如：li:nth-child(3) {color:red;}。
6、伪元素
伪元素是文档中若有实无的元素，一般用来设置特殊样式。
A、	::first-letter伪元素
该伪类元素一般用于设置首字母样式，如首字母大写: p::first-letter {font-size: 300%;}， 。
B、	::first-line伪元素
这个伪类应用于设置文本段落的第一行，如将文本中单词设置为大写：p::first-line {font-variant: small-caps;}，这个是将单词改为小型大写字母，跟一般使用的text-transform: uppercase;不一样，这个设置的是较小的。
C、	::before和::after伪元素 
应用于在特定元素前面或后面添加特殊内容，一般跟content属性联合使用。如：
p.age::before { content: "Age: ";}  p.age:: after{ content: " years.";}
<p class="age">25</p>
结果：Age: 25 years.
也可直接加入属性值，如：
a:after {content: " (" attr(href) ")";}
<a href="#more_info"> More Information</a>
结果：More Information(#more_info)
（三）CSS继承和层叠
CSS部分属性值具有继承性，比如文本字体，颜色，大小等与文本有关，有些属性并不能实现继承，因为意义不大，比如边框，内外边距等与盒子的定位和显示方式有关。 
层叠，就是层叠样式表中的层叠，是一种样式在文档层次中逐层叠加的过程，目的是让浏览器面对某个标签特定属性值的多个来源，最终确定使用哪个值。
层叠是CSS的核心机制。在浏览器中层叠各个来源样式的顺序是：浏览器默认样式表<用户样式表<作者链接样式表<作者嵌入样式表<作者行内样式表。所以，行内样式表的优先级是最高的。
1、层叠规则
层叠机制有自身的规则，具体规则如下：
规则一：找到应用给每个元素和属性的所有声明；
规则二：按顺序和权重排序，其中”!import;”用于加重声明的权重；
规则三：按特指度排序；特指度有个计算方法：ICE（I-C-E），分别表示ID，Class，Element，选择符有一个ID或者Class或者Element就在ICE位上加一，最后得到一个三位数，如：
p 0-0-1    特指度=1 
     p.largetext 0-1-1   特指度=11
     p#largetext 1-0-1    特指度=101 
     body p#largetext 1-0-2   特指度=102 
     body p#largetext ul.mylist 1-1-3    特指度=113 
 body p#largetext ul.mylist li 1-1-4   特指度=114；
在此，每个选择符都比前一个选择符的特指度高。
规则四：顺序决定权重。如果两个选择符的权重和特指度是一样的，则看声明的先后顺序决定，后声明的规则胜出。
2、规则声明
CSS属性值主要分为三种：文本值（关键字），数字值，颜色值。
文本值主要是声明中以文本为主，如：display:block,visibility有hidden和visible值等。
数字值主要是写明数字，描述元素的各种度量，如：font-size:12px。数字值分为两类：绝对值和相对值。绝对值就是写明了具体数字值，如12px， 1pt，2pc等，其中pt表示点，pc表示皮卡，px表示像素。相对值就是有参照物比对，如：1.5em，2ex，120%，其中em表示字体中字母M的宽度，取决于设置的字体，ex表示字体x中的高度，小写字母x表示一种字体的字母中间部分的高度，不包含上下突出的部分，如p和b就是上下突出。
颜色值的写法有多种，主要有：颜色名（如：red，green等），十六进制颜色（如：#ffffff），RGB颜色值（如：rgb（0,255，201）），RGB百分比（如：rgb（r%，g%，b%）），HSL（如：hsl(色相，饱和度%，亮度%)），Alpha通道（如：rgba(222,14,125,0.5)）。
十六进制颜色：十六进制颜色值主要是通过#加上0-9或a-f来组合成六位数值，每两位分别表示rgb的数值，即1-2位表示红色（R），3-4位表示绿色（g），5-6位表示蓝色（b）。其中#fff或#ffffff表示白色，#000或#000000表示黑色，所以从0-9数字越大颜色值越浅，a-f字母数位越大颜色值越浅。如果想要根据十六进制快速推算出颜色，可以查看十六进制颜色的每两位的前一位数值，如：#7ca9be，查看rgb的第一位值7、a、b，可以看出红色值为7，颜色较浅，a，b相近，表示绿色和蓝色，所以颜色为蓝绿色。
HSL：格式：hsl(0,0%，0%)。
HSL中第一个值表示色相，是一个具体的颜色，取值范围是0°到360°的圆心角，每个角度代表一个值；
第二个值表示饱和度，描述了在0%-100%的值中相同色相、明度下色彩纯度的变化，数值越大，灰色越少，呈现一种由灰度到纯色的变化。
第三个值表示明度，控制了颜色明暗的变化，描述了0%-100%的值中相同色相、饱和度下色彩由暗到亮的变化，数值越小，颜色越暗，越接近黑色；数值越大，颜色越两，越接近白色。
颜色圆心角的排列按照红橙黄绿青蓝紫排列，0°或360°表示红色，180°则是相对的青色。彩虹七色是运用的红橙黄绿蓝靛紫的排列，数值分别是：红（0°），橙（35°），黄（60°），绿（125°），蓝（230°），靛（280°），紫（305°）。

Alpha通道：alpha主要是设置颜色的透明度，相应的格式分别是：RGBA和HSLA。其中A的是可以是0-1的任意值（包含0和1），如：rgba（122,14,35,0.6）。
三、盒模型和定位元素
所谓盒模型，就是浏览器为页面上每个HTML元素生成的矩形盒子，这些矩形盒子在页面上以可见版式模型排布。可见版式主要由三个属性控制：position属性，display属性，float属性。Position属性控制元素间的位置关系，display属性控制元素是堆叠，并排，还是不显示在页面上，float属性提供控制方式，以便组成多栏布局。Display属性也可提供设置方法。
（一）理解盒模型
盒模型主要由三个属性组成：边框（border），内边距（padding），外边距（margin），这三个属性将元素内容包裹成一个矩形盒子形状，也称盒子模型。这三个属性均有简写模式，按照上，右，下，左顺时针顺序编写设置，如：margin:10px 5px 10px 5px;
（二）叠加外边距
垂直方向的外边距会叠加，这个必须了解。两个元素上下排列，上下外边距会叠加，直到一个元素的外边距碰到另一个元素的边框。较宽的外边距决定两个元素上下最终的间隔。
通常在为文本元素设置外边距的时候混合使用不同单位，假设一个段落左右外边距可设置px（像素）为单位，使左右外边距始终是固定的距离，不受字号变大变小的影响，但是上下外边距以em为单位，可以让段落间距随着字号的变化随意增大或缩小。
（三）盒子的宽度
在设置盒模型时，盒子的宽度可设置也可不设置，如果没有设置宽度会默认为auto，会扩展到填满其父元素的宽度为止，添加水平边框，内边距和外边距，会导致内容（content）宽度减少，减少量等于水平边框，内边距和外边距的和。图解如下：
未设置宽度的盒子：填充父元素宽度为722.67px；
为未设置宽度的盒子添加边框，内外边距： margin: 25px 30px; padding: 5px;      border: 1px solid #666;盒子的内容宽度减少为662.67px；

如果设置了盒子的宽度，并为其添加边框，内边距和外边距，会导致盒子扩展的更宽，但盒子内容的宽度不会变，width属性设定的只是盒子内容的宽度，而非盒子占据的水平宽度。图解如下：
设置盒子的宽度为400px，未填满父元素；
为设置宽度的盒子添加边框，内外边距：margin: 25px 30px; padding: 5px;      border: 1px solid #666;盒子的宽度只是加上了左右边框2px和内距10px，具体内容宽度没变，只是水平宽度变大。
CSS3中新增了box-sizing属性，可以将设置了宽度的盒子改为默认auto属性状态行为。
（四）浮动与清除
使用浮动与清除可以设置出多栏布局，修改页面排版。浮动一般使用float，清除使用的方法有多种，以后详细讲解，先讲浮动方法。
1、浮动
CSS设计float属性主要目的是为了实现文本排绕图片的效果，而这个要也成了设计多栏布局的最简单方式。
（1）文本排绕图片布局
设计文本排绕图片布局时，先在标记中将图片代码写上，然后再写排绕的文本信息。如：<img src="imgs/catPolice.png" style="float:left;margin:5px;" />
        <p>。。。。省略文本。。。。</p>
（2）多栏式布局
多栏式布局需要将每块分栏设置浮动float，并且设置宽度，可实现多栏布局。下列中图片没有设置宽度是因为图片有默认宽度，若是其他标签元素需要设置宽度。如：<img src="imgs/catPolice.png" style="float:left;margin:5px;" />     <p style="float:left;width:230px;">。。。。省略文本。。。。</p>
2、清除浮动
虽然浮动元素可以实现多栏布局，但是会影响后面非浮动元素标签布局。因为浮动元素会脱离文档流，父元素也包裹不了它们，所以有时会导致页面布局错乱。下面介绍三种清除浮动的方法：
（1）父元素添加overflow:hiden
Overflow:hiden是用来设计内容溢出边框时隐藏溢出的内容，也可用来强制父元素包围浮动的子元素。
如：<div style="overflow:hidden;">
<img src="imgs/catPolice.png" style="float:left;margin:5px;" />   
          <p style="float:left;width:230px;">。。。。省略文本。。。。</p>
</div>
（2）父元素添加浮动
父元素添加float属性，可以让子元素随着父元素，被其包裹，但是父元素后面的兄弟元素需要添加clear:both属性，不然其兄弟元素会随着float浮动在其后面。
如：<div style=" float:left;border: 1px solid blue; margin: 0px 0px 10px 0px;">
<img src="imgs/catPolice.png" style="float:left;margin:5px;" />   
          <p style="float:left;width:230px;">。。。。省略文本。。。。</p>
</div>
<div style="height:90px;clear:both;">底部元素内容底部元素内容</div>
（3）添加非浮动的清除元素
第三种强制父元素包裹浮动子元素是在浮动元素后面，父元素里面添加一个非浮动元素，再清除该元素。因为父元素一定会包裹非浮动元素，而浮动元素在非浮动元素前面，所以一定会包裹浮动元素。
如：<div style=" float:left;border: 1px solid blue; margin: 0px 0px 10px 0px;">
<img src="imgs/catPolice.png" style="float:left;margin:5px;" />   
          <p style="float:left;width:230px;">。。。。省略文本。。。。</p>
<div style="clear:both;"></div>
</div>
还有一种清除浮动的方式，在父元素上添加class类，将清除属性写在该类中。如：
.clearFloat:after {
            visibility:hidden;
            height:0px;
            content:'.';
            display:block;
            clear:both;
        }
 .clearFloat { zoom:1; }
它只添加了一个清除的包含句点作为非浮动元素（必须得有内容，而句点是最小的内容）。规则中的其他声明是为了确保这个伪元素没有高度，而且在页面上不可见。添加zoom属性是为了兼容IE6以下的浏览器。
（4）没有父元素直接添加clear属性
如果没有父元素包裹，可直接给一个浮动元素添加clear:both属性。
（五）定位
CSS布局的核心是position属性，对于元素盒子应用这个属性，可以相对于它在常规文档流中重新定位。Position属性有四个属性，默认是static属性，也就是静态定位，按照文档顺序流自上而下来定位。想要修改定位，需要运用其他三个属性值。
1、相对定位（relative）
使用相对定位relative在页面一般看不出来，因为它相对的是它原来在文档流的位置，设置之后可以通过top，right，bottom，left来改变它的位置。
2、绝对定位（absolute）
绝对定位跟相对定位不同，绝对定位是将元素从文档流中完全拿出，使其脱离常规文档流，相对于顶级元素body定位，这就引出一个关于定位的重要概念：定位上下文。定位之后可通过top，right，bottom，left修改位置。
3、固定定位（fixed）
固定定位和绝对定位从完全脱离文档流上来说，定位效果是一样的，都脱离了常规文档流，但是固定定位相对定位的元素不是body，是视口（浏览器窗口或手持设备屏幕），因此它不会随着页面滚动而移动。
4、定位上下文
把元素的position属性设定为relative，absolute，fixed中的其中一个，然后通过top，right，bottom，left属性修改位置，相对于另一个元素移动该元素的位置，“另一个元素”（参照物）就是定位上下文。
在使用绝对定位absolute时，定位上下文是body元素。文档中默认是静态定位，即常规文档流，如果元素想从文档流中脱离，自定义位置，需要添加position属性，设置三种定位中的一种，然后通过top，right，bottom，left属性修改位置，没有添加position属性，直接通过top，right，bottom，left属性修改位置是无效的。
在使用绝对定位时，可以通过设置其祖先元素的position属性为relative，将其祖先元素定义为绝对定位的定位上下文，即可根据祖先元素设置位置的移动。如：将父元素添加position属性，设置值为relative，内部元素为absolute，使用top等属性时即是相对父元素进行绝对定位。
<body>
     <div style="position: relative; width: 250px; margin: 50px 40px; border-top: 3px solid red; ">
         <div style="position: absolute; top: 10px; left: 20px; background: #ccc;">This is text…</div>
     </div>
</body>
（六）显示属性
所有元素都有display属性，只是默认是inline值，行内显示，部分块级元素的display属性值是block，占据整行。display属性除了以上两个值以外，值得注意的还有none值。
将display属性设置为none时，在页面文档上不会显示该元素，元素所占的位置也会被其他元素占用。与此相对的是visibility属性，其值有visibile（默认值）和hidden，将元素设置为hidden时，元素会隐藏，但是本身占据的位置不会被“回收”，仍旧占据空位。
（七）背景
在CSS中，可以将每个盒子想象由两个图层组成，元素的前景层包含内容和边框，背景层可以用实色填充（背景色）或多层背景图，其中背景图位于背景色之上。CSS规定以下与背景相关属性：background-color，background-image，background-repeat，background-position，background-size，background-attachment，background-clip，background-origin，background-break（目前尚未得到广泛支持）。
1、背景颜色
背景颜色是CSS背景属性中最简单的，通过设置background-color可以填充元素的背景层颜色。因为盒子模型中可以分为前景层和背景层，所以也可以分开设置它们的属性值。如：
<div style=" width: 250px;height:90px;color:green; border: 3px solid;background-color:pink; ">
      <div style="position: absolute; top: 10px; left: 20px; background: #ccc;">This is text…</div>
</div>
 
上例中设置了color和background-color两个属性值，并且border属性并没有设置border-color，按照页面结果来看：父元素的边框和子元素内容受父元素的color影响为绿色，父元素的背景色为粉色。可以得出结论：color会影响盒子的前景色，包括内容和未设置边框颜色的边框值；background-color影响盒子的背景色。
2、背景图片
背景图片的设置通过background-image:url(图片路径)属性，图片设置后会默认从水平和垂直方向填充整个背景区域。如：
<div style="width: 260px;height:190px;color:green; margin: 5px 10px; border: 3px solid;background-color:pink;background-image:url(imgs/9.gif) ">
        <div style="position: absolute; top: 10px; left: 20px; background: #ccc;">This is text…</div>
</div>
3、背景重复
背景重复通过设置background-repeat属性设置，它有四个值，默认repeat：即水平和垂直平铺填充整个区域（如上例）；repeat-x：水平平铺一条线（顶部）；repeat-y：垂直平铺一条线（左边）；no-re peat：背景图只显示一次，不平铺。
4、背景位置
用于控制背景图片的background-position属性是CSS背景属性中最复杂的一个，其属性值有：top，right，bottom，left，center，其中这五个值的任意两个组合也可作为background-position的属性值。
background-position同时设置了元素和图片的原点，原点决定了图片和元素在某一点水平和垂直的坐标。默认原点是左上角。如果设置background-position:center，（这是简写形式，实际是background-position:center center），则背景图片会在区域中水平垂直居中显示，再平铺或其他操作。
<div style="position: relative; width: 260px;height:190px;color:green; margin: 5px 10px; border: 3px solid;background-color:pink;background-image:url(imgs/9.gif);background-repeat:repeat; background-position:center;">
        <div style="position: absolute; top: 10px; left: 20px; background: #ccc;">This is text…</div>
</div>或者设置background-repeat:repeat-x; background-position:center;
背景位置在设值时有三种方式可以填写：关键字（top，left等），百分比，绝对或相对单位的数值。可以使用两个值分别设置水平和垂直位置。
使用关键字时，排列的顺序不重要，如：left top或者top left。为防止浏览器不兼容，最好不要混用关键字值和数值。
使用数字值时，第一个数值表示水平，第二个数值表示垂直，如果只填写一个数值，则表示水平方向的，垂直方向默认为center。
5、背景尺寸
background-size用来设置背景图片的尺寸，它的值有四种写法：百分比（%），数值，cover（拉大图片，使背景图片完全填充背景区域，保持宽高比），contain（缩放图片，使背景图片恰好适合背景区域，不一定完全填满背景区域，保持宽高比）。
6、背景粘附
background-attachment属性控制滚动元素内的背景图片是否随着元素滚动而移动。默认值为scroll，可修改为fixed，固定背景图片。
7、背景属性简写
一般设置背景属性时，全部属性值都写明的是这种格式：
body {
            background-image: url(images/watermark.png);
            background-position: center;
            background-color: #fff;
            background-repeat: no-repeat;
            background-size: contain;
            background-attachment: fixed;
        }
这种写法代码太多，比较繁杂，所以提供简写模式：
body {background: url(images/watermark.png) center #fff no-repeat contain fixed;}
声明中少写某些值，就会使用相应属性的默认值。
8、其他CSS3背景属性
CSS3中以下这些背景属性在浏览器支持率不高，所以只当了解背景属性信息。
background-clip：控制背景绘制区域的范围。如：限制背景颜色和背景图片在内容区显示，不显示在内边距区域。默认会扩展到边框外边界。
background-origin：控制背景定位区域的原点。可以设定除盒子左上角以外的位置为原点。如：内容区域的左上角。
background-break：控制分离元素（如跨越多行的行内元素）显示效果。
9、多背景图片与背景渐变
（1）多背景图片
CSS3还可以给元素添加多个背景图片，使用简写模式进行编写。
.bgImgs {background: url(imgs/pp.jpg) 0px 10px no-repeat, url(imgs/lp2.jpg) 480px 10px no-repeat,url(imgs/lp.gif) 670px 10px no-repeat, #ffbd75; }
上例中使用简写模式，利用逗号分隔每个背景图片，为了防止图片加载失败时默认的透明状态，故在最后加了背景色#ffbd75。需要注意的是，代码中先列出的图片显示在上方，或者说更接近前景层。
图中pp.jpg先列出，故显示在最上方，之后依次是lp2.jpg和lp.gif图片，每个图片层层叠加显示。
CSS3中部分属性在浏览器中的支持率并不高，为了鼓励浏览器厂商尽早采用W3C的CSS2推荐标准，于是产生了VSP（Vendor Specific Prefixes，厂商前缀）的概念。以下CSS3属性必须加前缀：
border-image; translate ; linear-gradient;  transition ;radial-gradient;                   background *; transform; background-image* ; transform-origin;
* 针对背景图片或渐变


（2）背景渐变
渐变是在一定长度内两种或多种颜色之间的自然过渡。渐变是CSS帮我们生成的背景图片，可以使用background-image，也可以使用background简介模式。
渐变分为线性渐变和径向渐变。线性渐变是从一端延伸到另一端，径向渐变是由元素内一点向四周发散。
渐变需要确定渐变点，渐变点就是渐变方向上的点，在这些点上可以渐变的颜色和不透明度（设置不透明度时，使用颜色设置方式rgba(R,G,B,A)）。通过设定下一渐变点的颜色值，可以控制渐变的效果。可以添加任意多个渐变点，渐变点的位置一般使用整个渐变宽度的百分比来表示。同一个渐变点设置两个颜色值可以得到突变的效果。如：background-image: linear-gradient(to left, #ade673 20%,#61d3b3 50%,#55cfe0 70%);，background-image: linear-gradient(to left, #ade673 20%,#61d3b3 50%,#eea0a0 50%,#55cfe0 70%);
  
A、线性渐变
线性渐变方向默认是从上到下。也可以修改渐变方向，通过关键字（to left，to right等），角度（deg）。可以在颜色值后添加百分比，设置渐变宽度。
因为浏览器运营商对W3C标准的支持不同，所以有不同的浏览器前缀的写法。
W3C标准：linear-gradient([[<angle> | to <side-or-corner> ],]?<color-stop>[,<color-stop>]+),“？”之前的参数表示渐变的方向，可以通过角度和to + 关键字的方法写明，后面的两个参数表示渐变开始的颜色和结束的颜色值，颜色值可以写多个，属性会自动调节每个颜色值的比例。如：background: linear-gradient(to left, #64d1dd, #fff);如：background: linear-gradient(to left, #ade673,#61d3b3,#55cfe0)。设置角度：background: linear-gradient(45deg, #64d1dd, #fff);

Webkit引擎：webkit引擎有两种编写格式，
一种是旧式的：-webkit-gradient(<type>,<point>[,<radius>]?,<point>[,<radius>]?[,<stop>]*)，type表示渐变类型(linear，radial)，point或radius表示渐变方向的关键字或角度（left top，right bottom等），第一个point表示起点位置，第二个point表示终点位置，stop表示渐变的颜色，实际是一个color-stop函数，可以接收两个参数，格式：color-stop（位置，颜色值），其中位置取值范围是0-1，可以尽可能详细的设置渐变颜色。还有一种简写的格式为：from（起点颜色值）,to（终点颜色值）。只能是两种颜色渐变。如：background: -webkit-gradient(linear,left top,right bottom,from(#ade673),to(#55cfe0)); background: -webkit-gradient(linear,left top,right bottom, color-stop(0,#ade673),color-stop(0.4,#61d3b3),color-stop(1,#55cfe0));
一种是新式的：-webkit-linear-gradient([<point>||<angle>,]?<stop>,<stop>[,<stop>]*)， point表示渐变起始位置，可使用关键字（top，left top等）和角度（deg），stop表示颜色值，可写多个颜色值。如：background: -webkit-linear-gradient(left bottom/45deg,#ade673,#61d3b3,#55cfe0);下列可写关键字left bottom，也可写角度45deg。

Trident引擎：-ms-linear-gradient([<point>||<angle>,]?<stop>,<stop>[,<stop>]*)，和-moz-linear-gradient([<point>||<angle>,]?<stop>,<stop>[,<stop>]*)，-o-linear-gradient([<point>||<angle>,]?<stop>,<stop>[,<stop>]*)属性参数一样，第一个参数表示位置，后面的参数表示颜色值。
兼容IE浏览器旧版本：filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#2ce062', endColorstr='#007db9e8',GradientType=0 )\9 \0; /* IE6-8 */ 
B、径向渐变
径向渐变比线性渐变要复杂一些，在创建径向渐变的时候，可以使用参数设置渐变的形状，位置，尺寸，颜色，不透明度（设置不透明度时，使用颜色设置方式rgba(R,G,B,A)）。默认渐变会填充元素。
径向渐变的标准格式：
radial-gradient([[<shape>||<size>]?[at <position>,]?<color-stop>[,<color-stop>]+)
第一个参数表示形状或大小，形状的取值：circle，ellipse（默认椭圆），渐变的半径大小（size）的取值：farthest-corner（默认），指定渐变半径长度从圆心到离圆心最远的角；closest-corner，指定渐变半径长度从圆心到离圆心最近的角；farthest-side：指定渐变半径长度从圆心到离圆心最远的边；closest-side：指定渐变半径长度从圆心到离圆心最近的边；
第二个参数表示径向渐变原点位置，且第一二个参数之间只有空格，没有逗号隔开，后面的参数表示渐变颜色，可设置多种颜色值。可以在颜色值后添加百分比，设置渐变宽度。如：background: radial-gradient( circle at top, #61d3b3,#64d1dd,pink);（渐变原点在顶部）background: radial-gradient( #61d3b3 20%,#64d1dd 40%,pink);（颜色值后面添加百分比，规定渐变宽度，默认渐变形式）background: radial-gradient(circle at 50px 30px,#61d3b3 20%,#64d1dd 40%,pink);（定义渐变位置，形状为圆形） 

其他兼容模式：
-webkit-radial-gradient([<position>||<angle>,]? [<shape>||<size>,]>?<color-stop>[,<color-stop>]+)；这是webkit内核模式旧版的编写格式，第一个参数表示位置或角度，第二个参数表示形状或渐变半径大小，第三个参数是颜色值。其他浏览器的兼容模式编写格式一样，只是属性前缀不一样，需自行修改。如：
background: -webkit-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* Safari 5.1 - 6.0 */
background: -o-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* Opera 11.6 - 12.0 */
background: -moz-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* Firefox 3.6 - 15 */
background: radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* 标准*/

四、字体和文本
（一）字体
网页中的字体有三种来源：用户机器中安装的字体；第三方网站上的字体，通过link标签链接引用；保存在web服务器上的字体，通过@font-face规则随网页一起发给浏览器。
与字体相关的有以下六个属性：font-family，font-size，font-weight，font-style，font-variant，font（简写）。
字体和文本的差别：字体属性主要描述一类字体的大小和外观。比如，使用什么字体族（是Times，还是Helvitica），多大字号，粗体还是斜体。文本属性描述对文本的处理方式。比如，行高或者字符间距多大，有没有下划线和缩进。
1、字体族
在定义页面字体时，使用font-family。该属性可以继承，可以填写多个字体，形成字体栈，默认使用第一位的字体，如果用户机器没有安装该字体，则顺延往下，直到有可使用字体为止。为防止无字体可用，最好在末尾处添加一个通用字体，如：serif（衬线字体），san-serif（无衬线字体）等。
在添加备用字体的时候，一般会考虑字体的“x高度”（指英文字母不包括上伸和下伸部位的高度，如d和p是有上下伸展部位的，因x字母没有伸展部位，故用x高度来度量。），有几种字体适合一起备用：Verdana 的后备用Tahoma 最好，因它们的“x 高度”相同。verdana, tahoma, sans-serif。如果想设定一个相对轻爽一点的无衬线字体，可以使用这个字体栈：helvetica, arial, sans-serif。
2、字体大小
字体大小的设置通过font-size属性，可使用的单位有绝对单位值和相对单位值，绝对字体大小设置如：像素（px），派卡（pc），点（pt）。相对字体大小设置如：em，rem（根元素字体大小），%，该元素的字体大小相对于最近的被设置字体大小的祖先元素来确定。
如想使用em，又想设置具体的像素大小，可以通过设置body的font-size为62.5%，这样换算为px是：16 X 62.5%=10，即1em=10px。使用相对字体大小，可以自动调整各层元素。
CSS3中新增的相对单位rem，是相对根元素，这个单位相比em要方便许多。通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。对于不支持它的浏览器，可以通过以下方法进行设置：/*IE8 及之前版本的IE 浏览器使用14 像素*/
p;{font-size: 14px;font-size: .875rem; }
3、字体样式
字体样式通过font-style属性设置，主要设置字体是否倾斜，值：italic、oblique、normal。其中italic和oblique的效果一样，都是倾斜体。如想在html中直接使用，可使用<em>标签，这个元素默认字体倾斜。
4、字体粗细
字体粗细通过font-weight属性设置，可使用关键字bold，bolder，lighter，normal，或者数字值100-900。

5、字体变化
字体变化通过设置font-variant属性，该属性只有两个值normal和small-caps。small-caps属性值会将所有小写英文字母改变为大写英文字母，且字体不会变大，会变成小型大写字母。
如：p::first-line {font-variant: small-caps;} 
font-variant与text-transform的区别：
text-transform也是将字体进行转换的属性，其值有：uppercase（转换为大写字母），lowercase（转换为小写字母），capitalize（每个单词的首字母大写）。
text-transform转换字母时不会压缩字体，可能还会拉伸字体，所以和font-variant不一样。
如：p::first-line {text-transform:uppercase;}

6、简写字体属性
简写字体属性需要遵守两条规则：
规则一：必须声明font-size和font-family属性。
规则二：声明顺序必须按照以下顺序：（1）font-variant，font-weight，font-style不分先后；（2）font-size；（3）font-family；如：p { font: bold italic small-caps .9em helvetica, arial, sans-serif; } 。也可以在设置字体size的时候将行高line-height一起设置，写成0.9em/1.5。
（二）文本属性
以下几个是最有用的几个文本属性： text-indent; letter-spacing; word-spacing;  text-decoration; text-align; line-height; text-transform; vertical-align.

1、文本缩进
文本缩进通过text-indent属性设置，其值是长度值，可以是正负任意值。text-indent 属性设定行内盒子相对于包含元素的起点。默认情况下，这个起点就是包含元素的左上角。
如：p { text-indent:5%; } 。 
上例中显示了盒子模型里添加了子元素，并且每个子元素的段落都会缩进5%。这就说明：text-indent的值是可继承的，但是需要注意的是，继承的值并不是父元素设置的原始值，而是通过计算得来的最终值。上例中盒子模型的宽度是260px，缩进5%，即260 * 0.05=13px，子元素缩进的是13px，所以每个子元素缩进的值都是一样的。
2、字符间距与单词间距
字符间距和单词间距很相似，都是设置字母之间的间距，但是字符间距可以对中文网页有效，而单词间距则是对每一个单词之间的距离设值，中文没有单词一说，所以对中文网页无效，但是对中英混排的段落有效。
字符间距通过letter-spacing属性设置，这个属性对中英文字符都有效果。letter-spacing属性可以设置正负值，正值则是扩大间距，负值则是缩小间距。无论字符设置的字体使用什么单位，字符间距使用的单位必须是相对单位，这样方便字符间距随着字体的大小变化而同比例缩放。
单词间距通过word-spacing属性设置，可设正负值，只对英文单词有效。CSS中对单词的定义是：任何两边有空白的字符和字符串都视为“单词”。
3、文本修饰
文本修饰通过设置text-decoration属性，一般这个属性用来设置下划线，其他属性使用的很少，取值有：underline(下划线)、overline（上划线）、line-through（中间横穿线）、blink、none（无线）。如：nav a {text-decoration: none;} a:hover {text-decoration: underline;}
4、文本对齐
文本对齐是通过设置text-align属性，其值范围有：left，right，center，justify。center属性值可设置文本和图片水平居中显示，justify可设置内容两端对齐显示，该属性值使用较少。
5、行高
行高的设置通过line-height属性，也有在font简写属性中以复合值的形式将字体大小和行高写一起计算。一般设置行高最好使用相对单位值，这样在改变字体大小的时候不需要担心文本行之间会有重叠。
如：div#intro {font: 1.2em/1.4 helvetica, arial, sans-serif; } 
上例中设置字体大小为1.2em，行高为字体大小的1.4倍，即line-height=1.2 的像素数 * 1.4。这里只要给出数值就行，不需要给单位。这样如果修改字体大小，行高会自动变化。
6、文本转换
文本转换通过设置text-transform属性，其值有：uppercase（转换为大写字母），lowercase（转换为小写字母），capitalize（每个单词的首字母大写）。
与字体变化中的font-variant属性的区别在第四章第一条中的第五点有说明。
7、垂直对齐
垂直对齐通过设置vertical-align属性，其取值范围有：任意长度值和top，text-top，bottom，text-bottom，super，sub，middle等。
垂直对齐只对行内元素有效，如果想对齐块级元素，需要将块级元素display设置为inline。vertical-align一般用来设置上下标，虽然HTML标签中有自带的<sub>和<sup>标签，但是自定义的值可以方便调整。
（三）Web字体 
目前，使用@font-face规则在网页中嵌入可下载字体的CSS功能，在各大浏览器中得到支持。也就是说，网页可以不用依赖用户机器所安装的字体，可以从Web服务器上下载字体，确保用户能看到CSS中设置的字体。
设定Web字体可以通过一下三种方式：
1、公用字体库
Google Web Fonts 和Adobe 的Typekit 是目前最大的两个在线公共字体库，前者托管着大约500 多类字体，后者包含739 个字体族，以订购方式提供访问。通过link标签进行引用，如：<link href='http://fonts.googleapis.com/css?family=Anton|Niconne|Prata'rel='stylesheet' type='text/css'>。 
2、打包的@font-face包
使用该种方法引用字体，需要从自己的网站或者第三方网站可下载字体，一般使用这种方法提供的字体会在在第一次使用时就被下载缓存，以后都不需要再下载，但是这个字体只能用于显示网页，用户不能将这种字体用于其他用途。
编写格式：@font-face {
            font-family: <YourWebFontName>;
            src: <source> [<format>][,<source> [<format>]]*;
            [font-weight: <weight>]; [font-style: <style>];   }
1、YourWebFontName：此值指的就是你自定义的字体名称，最好是使用你下载的默认字体，他将被引用到你的Web元素中的font-family。如“font-family:"YourWebFontName";”
2、source：此值指的是你自定义的字体的存放路径，可以是相对路径也可以是绝路径；
3、format：此值指的是你自定义的字体的格式，主要用来帮助浏览器识别，其值主要有以下几种类型：truetype,opentype,truetype-aat,embedded-opentype,avg等；
如：
@font-face {
            /*这就是将来在字体栈中引用的字体族的名字*/
            font-family: 'UbuntuTitlingBold';
            src: url('UbuntuTitling-Bold-webfont.eot');
            src: url('UbuntuTitling-Bold-webfont.eot?#iefix') format('embedded-opentype'), url('UbuntuTitling-Bold-webfont.woff') format('woff'), url('UbuntuTitling-Bold-webfont.ttf') format('truetype'), url('UbuntuTitling-Bold-webfont. svg#UbuntuTitlingBold') format('svg');
 font-weight: normal;
            font-style: normal;
        }
在其他元素引用字体时写的必须是@font-face中font-family的名字,如：UbuntuTitlingBold 。
3、生成@font-face包
使用Font Squirrel 的转换程序可以将指定字体转换为@font-face字体包。
（四）文本版式
经典排版布局中使用的首字下沉，运用到伪类元素：：first-letter首字设置属性。
如：h1 + p::first-letter {font-family: times, serif;font-size: 90px;float: left;
            line-height: .65;border: 1px solid;padding: .085em 3px 0 0; }
     h1 + p::first-line {font-variant: small-caps;letter-spacing: .15em; } 




五、页面布局
（一）布局的基本概念
多栏布局有三种基本实现方案：固定宽度、流动、弹性。
1、固定宽度布局
这种布局的大小不会随着用户调整浏览器窗口的大小而变化，一般宽度设值为900-1100像素宽，常用的基本是960像素，因为这个宽度适合所有现代显示器，而且能够被16，12，10，8，6，5，4和3整除，不仅容易计算等宽分栏的数量，而且计算结果也没有小数的像素数。
2、流动布局
这种布局的大小随着用户浏览器窗口的大小而变化，这种布局能更好的适应大屏幕，但是也意味着需要放弃对某些方面的控制，例如：页面宽度的变化，文本行的变化和页面元素间位置关系的变化等。这种在当代来说，称为响应式布局。
3、弹性布局
这种布局不仅随着浏览器窗口大小变化，而且页面文本内容也会随着变化。但是这种布局不好调整，目前没有比较好的案例。
（二）三栏-中栏流动布局
页面布局中固定每栏的宽度布局是比较容易的，如果让中间的一栏适应浏览器宽度自动变化（即中间栏设置流动布局），则是比较麻烦的。以下讲解两种方法实现中间栏流动布局。
1、用负外边距实现
该示例中实现中间栏流动布局具体操作如下：
（1）左右两侧栏目均设置float：left，固定宽度；
（2）在页面上添加一个div包围需要布局的三栏（#threeWrap），并设置float:left，宽度width:100%；
（3）再添加一个包围前两栏的div（#twoWrap），同样设置float:left，width:100%，但是在这个div（#twoWrap）中右外边距设置为负第三栏的宽度，如：第三栏width：200px，则#twoWrap{margin-right:-200px;}；
（4）在#twoWrap容器中第二栏（中间栏）需要设置左右外边距，将左右两边的栏目添加至平行。middleColumn{margin-left：左侧栏目宽度（如有padding，需加上padding的值）；margin-right：右侧栏目宽度（如有padding，需加上padding的值）}，
<header>头部信息</header>
        <div class="clearFloat" id="threecolwrap">
            <div id="twocolwrap">
                <nav class="left">
                    <ul>
                        <li>公共管理</li> 
                    </ul>
                </nav>
                <article> 文章内容文章内容文章内容文章内容文章内容</article>
            </div>
            <aside class="right">
                右侧文章内容
            </aside>
        </div>
<footer>底部信息</footer>
article {
    width: auto;
    /*空出左侧栏目的空间*/
    margin-left: 200px;
    /*在流动居中的栏右侧腾出空间*/
    margin-right: 270px;
    background: #eee;
    padding: 20px;
}

aside {
    width: 260px;
    background-color: #767798;
    color: #fff;
    float: left;
    padding: 5px;
}

div#threecolwrap {
    /*浮动强制它包围浮动的栏*/
    float: left;
    width: 100%;
}

div#twocolwrap {
    /*浮动强制它包围浮动的栏*/
    float: left;
    width: 100%;
    /*把右栏拉到区块外边距腾出的位置上*/
    margin-right: -270px;
}

2、用CSS3单元格实现
网页中使用table实现多栏布局是比较难以接受的，但是使用CSS模拟table布局是比较容易接受的，因为受的局限没有table布局多。使用CSS模拟table布局主要将display属性修改为table，table-row，table-cell。而将属性修改为table-cell的好处主要有以下三种：
（1）单元格（table-cell）不需要浮动就可以并排显示，而且直接为它们应用内边距也不会破坏布局。
（2）默认情况下，一行中的所有单元格高度相同，因而也不需要人造的等高栏效果了。
（3）任何没有明确设定宽度的栏都是流动的。
下列中左右两侧的宽度都是固定的，只有中间是流动布局。
<nav style="display:table-cell; width: 200px;">
   <ul> 
     <li>公共管理</li>
   </ul>
</nav>
<article style="display:table-cell;">文章内容文章内容文章内容</article>
<aside style="display:table-cell; width: 260px;">右侧文章内容</aside>

六、界面组件
（一）页面导航
界面组件主要是讲解页面导航和页面表单，导航的实现比较简单，可以通过CSS设计布局，再加上JS方法可实现动态展示功能。页面表单也是容易理解，这里不做详细讲解，先将页面导航示例代码贴上：
<nav class="left">
      <ul>
         <li>
           公共管理
           <ul class="twoMenu">
               <li>二级菜单</li>
               <li>二级菜单
         <ul class="threeMenu">
                       <li>三级菜单</li>
                       <li>三级菜单</li>
</ul>
 </li>
            </ul>
          </li>
          <li>公共管理</li>
          <li>公共管理</li>
      </ul>
</nav>
CSS样式：
nav ul, nav ul li {list-style: none;margin: 0px; }
nav>ul ,nav ul li{padding-left:20px;}
nav ul li:hover{background-color:#89c6cc;color:#fff;cursor:pointer;}
nav ul li>ul{display:none;}
strong {margin:5px;margin-left:-85px;}
JavaScript方法：
window.onload = function () {//页面加载，遍历是否有二级菜单，并为其添加ID
   $(".left ul li>ul").each(function (index) {
       var count = 0;
       $("li").each(function () { count++;});
       if (count > 0) {
         $(this).before('<strong onclick="showSubMenu(this)" class="m_'+index+'">+</strong>');
         $(this).attr("id", "menu_"+index);
       } else {
         $(this).before('<strong style="margin-left:-80px;" id="menu_index">-</strong>');
        }
        }).parent().siblings("li").append('<strong style="margin-left:-80px;" id="menu_index">-</strong>'); //为当前没有二级菜单的同级li添加标志
    };

    function showSubMenu(obj) { 
        var id = obj.className;
        id = id.substring(id.indexOf("_") + 1, id.length);
        //二级菜单是否打开
        var display = $(obj).siblings("ul").css("display");        
        if (display == "none") {
            $("#menu_" + id).show();
            $(obj).text("-");
        } else {
            $("#menu_" + id).hide();
            $(obj).text("+");
        }
    }
（二）CSS3过渡属性
CSS3过渡（transition）可以让属性产生动画效果，但是需要注意的是，使用该过渡属性需要针对所有浏览器添加厂商前缀。
transition有五个过渡属性：
transition-property：过渡的属性，如color，width等；
transition-during：过渡持续时间，以秒或毫米为单位；
transition-timing-function：过渡调速的函数，有ease-in，ease-out,ease-in-out,linear（默认值）；
transition-delay：过渡开始前的延迟时间，以秒或毫秒为单位，如：1s或200ms；
transition：过渡简写属性，如：transition：color 5s ease-in 2ms；
nav ul li:hover{
    transition:background-color 3s ease-in 0.1ms ;
    -webkit-transition:background-color 3s ease-in 1ms ;
    -moz-transition:background-color 3s ease-in 1ms ;
    -o-transition:background-color 3s ease-in 1ms ; 
    -ms-transition:background-color 3s ease-in 1ms ;
    background-color:#89c6cc; 
    color:#fff; 
    cursor:pointer;
}
上例的效果是鼠标悬停，背景色由淡渐变到深色。

（三）弹出层
弹出层也叫提示条，指鼠标悬停某个元素时显示的提示条信息，这跟弹出框还是有差别的。HTML5中新增了figure和figcaption元素，可以实现文本块添加主题信息。figure标签规定了独立的流内容，包括图像，图表，照片，代码等，如果删除该元素也不应影响整体文档流。
需要注意的是：使用figcaption元素必须确保其在figure元素的唯一性，并且figcaption元素要么是第一个子元素，要么是最后一个子元素。
示例如下：
<figure>
    <img src="imgs/catPolice.png" alt="catPolice" />
    <figcaption>
       <h3>catPolice</h3>
       <a href="#">More info</a>
     </figcaption>
 </figure>
 <figure class="click_me">
<div style="width:100%;height:100%;">
<span style="display:block;background-color:#7abff1;border:3px solid #808080"></span>
</div>
    <figcaption>
       <h3>Koala</h3>
       <a href="#">More info</a>
    </figcaption>
</figure> 
figure {
width:260px; /*图片盒子宽度*/
height:240px; /*图片盒子高度*/
margin:20px 20px; /*图片盒子间距*/
border:1px solid #666; /*图片边框*/
position:relative; /*为弹出层提供定位上下文*/
float:left; /*让图片并排显示*/
}

img {display:block;width:100%;height:100%;} /*去掉图片下方的基线空白*/

figcaption {
display:none; /*隐藏弹出层*/
position:absolute; /*相对于容器（图片）定位*/
left:74%; top:14px; /*把弹出层放到图片右侧*/
width:130px; /*弹出层宽度*/
padding:10px; /*弹出层内边距*/
background:#f2eaea;
border:3px solid red;
border-radius:6px;
}

figure:hover figcaption {display:block;z-index:2} /*鼠标悬停在图片上时显示弹出层*/

figcaption h3 { /*弹出层的内容*/
font-size:14px;
color:#666;
margin-bottom:6px; 
}

figcaption a { /*弹出层的内容*/
display:block; 
text-decoration:none;
font-size:12px;
color:#000;
}

figcaption::after { /*红色三角形的盒子*/
content:""; /*需要有内容，这里是一个空字符串*/
position:absolute; /*相对于弹出层定位*/
border:12px solid;
border-color:transparent red transparent transparent; /*利用边框及颜色透明制作三角形*/
right:100%; top:17px; /*相对于盒子边框定位三角形*/
height:0px; width:0px; /*收缩边框创造三角形*/
}
上例中实现了鼠标悬停在图片或文本块上时显示提示条信息，并且提示条的样式可调整。提示条中的三角指示标是通过::after伪类元素实现。：：after和：：before伪类元素用于添加文本或图标等少量内容的。
（四）Animation动画属性
animation属性是CSS3中新增的动画属性，可实现简易的动画效果。animation属性的编写通过关键帧“@keyframes”+动画名字+“{}”实现，“{}”里面编写动画效果，由“from”“to”实现动画路径，中间可通过百分比编写过程中的动画效果。如：
@-webkit-keyframes flipNext { /*兼容webkit内核浏览器*/
  from {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 45deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 45deg);
    -webkit-animation-timing-function: linear;
    animation-timing-function: linear;
    opacity: 0;
  }

  50% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 20deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 20deg);
    -webkit-animation-timing-function: linear;
    animation-timing-function: linear;
  } 

  to {
    -webkit-transform: perspective(400px) ;
    transform: perspective(400px)  ;
  }}
@keyframes flipNext {
from {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 45deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 45deg);
    -webkit-animation-timing-function: linear;
    animation-timing-function: linear;
    opacity: 0;
  }

  50% {
    -webkit-transform: perspective(400px) rotate3d(0, 1, 0, 20deg);
    transform: perspective(400px) rotate3d(0, 1, 0, 20deg);
    -webkit-animation-timing-function: linear;
    animation-timing-function: linear;
  } 

  to {
    -webkit-transform: perspective(400px) ;
    transform: perspective(400px)  ;
  }
}
调用animation：.flipNext {
  -webkit-backface-visibility: visible !important;
  backface-visibility: visible !important;
  -webkit-animation-name: flipNext;
  animation-name: flipNext;
}
可在其他CSS文件中引用animation。.animationFlipNext {
    animation: flipNext 1s linear 0s 1;
    -webkit-animation: flipNext 1s linear 0s 1;
    -moz-animation: flipNext 1s linear 0s 1; /* Firefox */
    -o-animation: flipNext 1s linear 0s 1; /* Opera */
}
1、animation属性
在引用animation时，需要注意animation的几个属性：
（1）animation-name：动画名称；
（2）animation-during：动画持续运行时间；
（3）animation-timing-function：动画播放方式{linear（匀速），ease（默认值，低速开始，中间加快，结束前变慢），ease-in（以低速开始），ease-out（以低速结束），ease-in-out（以低速开始和结束），cubic-bezier（贝塞尔曲线）}；
（4）animation-delay：动画延迟运行时间；
（5）animation-iteration-count：动画循环播放次数，可用数值表示，也可用infinite表示无限循环。
（6）animation-direction：动画播放方向，默认是normal，播放是向前方向滚动，alternate作用是在偶数次时动画向前方向播放，在奇数次时反方向播放。这个属性在animation-iteration-count属性为1时无效。
（7）animation-play-state：用来控制动画元素状态。主要有两个值：running和paused。可通过paused将正在播放的动画暂停，如果暂停了动画，元素样式将恢复到最原始状态；也可通过running将暂停的动画重新播放。
也可以简写：.demo {-webkit-animation:flipPre 10s ease-in-out 2s 10 alternate;}
2、animation事件
当使用animation属性时，我们希望在动画结束的时候执行其他操作，这就需要用到animation的动画事件，有两种方法可实现该效果：
（1）通过addEventListener（）方法监听动画。
（2）通过setTimeOut（function(){},time）方法定时操作。
如果通过addEventListener（）方法需要知道animation本身的事件，当-webkit-animation动画结束时会产生一个webkitAnimationEnd事件，不同的浏览器有不同的写法：webkitAnimationEnd，mozAnimationEnd，MSAnimationEnd，oAnimationEnd，animationEnd。
如：document.getElementById("content").addEventListener("animationend", function () { 
//动画结束时事件                document.getElementById("content").removeAttribute("class");
 }, false);
-webkit-animation动画有三个事件，开始事件：webkitAnimationStart，结束事件：webkitAnimationEnd，循环运动事件：webkitAnimationIteration。

七、CSS3实践
使用CSS3元素样式编写一个页面，文档记录重要代码，并解析。

（一）弧形角
圆形角的设置通过CSS3中border-radius属性设置，如果需要单独设置某个角的样式，需要明确是哪个角，取值范围是“左上”，“右上”，“左下”，“右下”；如果使用简写形式，需要注意的是，简写的顺序与之前的“上、右、下、左”不同，顺序是“左上”、“右上”、“右下”、“左下”，也是顺时针的方向。如：border-bottom-left-radius;border-bottom-right-radius;border-top-left-radius;border-top-right-radius;
虽然弧形角的属性在各浏览器的兼容性较好，但保险起见还是加上各大浏览器厂商前缀比较好，如-webkit-border-radius，-moz-border-radius，-o-border-radius，-ms-border-radius。
弧形角也可这样设置值：border-radius:6px/30px;
上图说明弧形角是指我们设定的值是位于角内部的圆形或椭圆形的半径。border-radius:6px/30px这种写法是标明水平半径和垂直半径的长度。如果想给每个角设置不同的水平和垂直半径，写法如下：border-radius:10px 6px 4px 12px / 20px 12px 8px 24px; /* 4 个水平值，4 个垂直值 */，效果图如右图。
（二）盒子阴影
盒子阴影的属性设置属于CSS3的属性，在部分旧版本浏览器不支持。格式：box-shadow：水平偏移量 垂直偏移量 模糊量 阴影扩展量 颜色 阴影位于边框的位置（默认边框外，即outset）。该属性的最低限度是：水平偏移量，垂直偏移量，颜色，即可得到一个与元素宽度大小一致的硬边阴影。
偏移量的值可取正负值，正值则阴影在右下，负值则阴影在左上；模糊量不能取负值，数值越大越模糊；扩展量可取正负值，正值则表示阴影向四周扩展，负值则表示阴影向内部扩展；阴影位置的取值有outset和inset，分别表示阴影像外扩展和向内部扩展。
为兼容盒子阴影属性在各浏览器能正常显示，需要在属性前加上厂商前缀，如-webkit-box-shadow，-moz- box-shadow，-o- box-shadow，-ms- box-shadow。
以下是box-shadow的取值效果图：box-shadow:0px 0px 10px 5px #979696 ouset;
右图是将水平和垂直偏移量设置为0px时的效果。
figure {
width:260px; /*图片盒子宽度*/
height:240px; /*图片盒子高度*/
margin:10px 10px; /*图片盒子间距*/
border:1px solid #666; /*图片边框*/
position:relative; /*为弹出层提供定位上下文*/
float:left; /*让图片并排显示*/
padding:10px; /*内距形成卡纸形式*/
background-color:#fff;
box-shadow:0px 0px 10px 5px #979696 ;
} 
设置多个阴影声明：box-shadow:0px 0px 10px 5px #979696 inset, -15px -15px 10px 5px #b9b9b9 inset ;


（三）水平垂直居中
在CSS中想要元素实现水平垂直居中对于文本来说是比较简单的，主要是设置text-align：center，line-height：文本行的高度（行高=容器高度），即可实现文本内容的水平垂直居中。但是对于其他元素，类似图片，想要垂直居中会比较麻烦。但也可以通过设置display属性值来进行修正。
设置图片垂直居中时，首先要确保图片的display属性值是inline或inline-block，即行内元素；然后设置包裹图片的容器display属性值为table-cell，添加vertical-align：middle，text-align：center。vertical-align属性值middle只对单元格有效。
<div class="clearFloat figure">
   <img src="imgs/pp.jpg" alt="Jasper" style="width:260px;height:240px;display:inline-block;"/> 
</div>
.figure{text-align:center;vertical-align:middle;width:700px;height:300px;
    display:table-cell;}
（四）文本阴影
文本阴影通过设置text-shadow属性，它的属性跟盒模型阴影很相似，其属性值为：水平偏移量 垂直偏移量 模糊量 颜色。文本阴影没有阴影扩展量，其最低限度是：水平和垂直偏移量，颜色值。
<h2 style="text-shadow:5px 5px 2px #83c9fb;">介绍内容介绍内容</h2>

文本阴影在浏览器中的支持率不高，所以需要兼容各浏览器，部分浏览器支持W3C标准格式：text-shadow:1px 1px 2px #fff；在旧版本的Chrome和FireFox浏览器上兼容性格式：-webkit-text-shadow和-moz-text-shadow。
1、兼容性设置
IE浏览器只有IE 10 +版本才支持，故兼容IE浏览器可通过以下方法实现：
（1）添加filter属性（帮助不大）
filter属性属于IE浏览器的专属属性，可用于设置透明度，背景色等。若要让浏览器读懂filter属性值，需要设置zoom：1，激活IE的hasLayout属性。hasLayout属性是IE的专有属性，一些浏览器兼容性问题大多是由它引起。
当hasLayout为true时(就是所谓的"拥有布局")，相当于元素产生新BFC，元素自己对自身内容进行组织和尺寸计算;
当hasLayout为false时(就是所谓的"不拥有布局")，相当于元素不产生新BFC，元素由其所属的containing block进行组织和尺寸计算。
触发hasLayout=true的方式有：
display: inline-block ；height: (除 auto 外任何值) ；width: (除 auto 外任何值) ；float: (left 或 right)； position: absolute； writing-mode: tb-rl； zoom: (除 normal 外任意值)。
color: #ff1f1f; filter: Alpha(opacity=30); *zoom: 1; /*字体颜色透明*/
（2）使用margin负值实现文字偏移（兼容性最好）
使用margin负值实现文字偏移，需要同时设置两个同样的元素标签，并且内容一致，覆盖在上方的文字需要设置position：absolute属性，同时设置z-index:2，兼容Firefox浏览器，使其固定位置，让后面的文本元素能够在文字下方。最重要的是让包裹这两个文本元素的容器能够有固定宽，或者设置display：inline-block，使其自动计算宽度。
<h4 class="font">
<span class="sh">box-shadow</span>
<span class="gradientColor">box-shadow</span>
</h4>
.sh {margin: -1px 0 0 -3px; color: #333; position: absolute;z-index:2;/*兼容FireFox浏览器*/} 
.font { margin: 0; padding: 10px;font-size: 36px;display:inline-block;}
span.gradientColor {
            color: rgba(255, 31, 31, 0.8);
            color: #ff1f1f; 
            filter: Alpha(opacity=30);
            *zoom: 1;
            background: -moz-linear-gradient(top, rgba(255, 31, 31, 0.8) 0%,rgba(255, 31, 31, 0.5) 100%); /* FF3.6+ */ 
            background: -webkit-linear-gradient(left, rgba(255, 31, 31, 0.8) 0%,rgba(255, 31, 31, 0.5) 100%); /* Chrome10+,Safari5.1+ */
            background: -o-linear-gradient(left, rgba(255, 31, 31, 0.8) 0%,rgba(255, 31, 31, 0.5) 100%); /* Opera 11.10+ */
            background: -ms-linear-gradient(left, rgba(255, 31, 31, 0.8) 0%,rgba(255, 31, 31, 0.5) 100%); /* IE10+ */
            background: linear-gradient(left, rgba(255, 31, 31, 0.8) 0%,rgba(255, 31, 31, 0.5) 100%); /* W3C */
            -webkit-text-fill-color: transparent;
            -webkit-background-clip: text;
        }


（3）使用CSS3兼容性文件（兼容性很好）
CSS3兼容性文件是由大神编写的类似js文件，以.htc为扩展名，使用behavior属性引入使用。在IE旧版本中支持IE6/7/8。
<div class="words" style="line-height: 40px; margin: 0 auto; font-size: 40px; text-align: center; font-weight: bold; text-transform: uppercase; ">box-shadow</div>
.words {
            text-shadow: 3px 3px 3px #ff0000;
            -webkit-text-shadow: 3px 3px 3px #ff0000; /* Chrome旧版本 */
            -moz-text-shadow: 3px 3px 3px #ff0000; /* FireFox旧版本*/
            -ms-text-shadow: 3px 3px 3xp #ff0000;
            line-height: 40px;
            margin: 0 auto;
            font-size: 40px;
            font-weight: bold;
            text-align: center;
            behavior: url(/ie-css3.htc); /*text-shadow兼容性比较好*/
            text-transform: uppercase;
        }


（五）文本转换
CSS3为变换规定了两个属性：transform和transform-origin。
transform属性可以调用函数，调用不同的变换函数可以实现不同的变换形式，传入的参数值可以控制变换的结果。调用函数格式：transform：函数名（参数值，参数值）。transform属性有以下函数可调用：
1、scale（x,y）
scale函数用于缩放元素，大于1的数值是放大，小于1的数值是缩小，如：scale(1.5)，放大1.5倍。
2、rotate（angle deg）
rotate函数用于根据指定度数旋转元素，正值是顺时针旋转，负值逆时针旋转。deg代表度数，如：rotate（30deg），顺时针旋转30度。
3、skew（x-angle deg,y-angle deg）
skew函数用于倾斜元素，可设置元素在x轴和y轴倾斜。采用deg表示倾斜角度，如：skew（20deg，30deg）。
4、translate（x,y）
translate函数用于平移对象，根据指定的X轴和Y轴平移，X和Y轴的走向与平常所用的坐标有所不同，需要注意。translate函数平移元素和相对定位有些相似，平移之后原始占据的空间仍会保留。如：translate（10px，20px）。
5、transform-origin：x-axis y-axis z-axis
transform-origin属性用于设定围绕其变换的原点。默认情况下，该原点是水平和垂直的中心点。可以通过transform-origin属性使用关键字（left，top，bottom，right和center等）、数值(%、px等)改变其原点位置。数值的正负值可以将原点设置在元素的边界之外。如：transform-origin:20% 40%。
6、3D转换
以上函数方法均可实现2D转换，部分函数有3D转换的功能，需要与特定属性结合使用实现3D转换，但是3D转换在浏览器的支持率并不高，以下属性是属于3D转换。
（1）transform-style属性
该属性规定如何在3D空间显示被嵌套的元素。取值范围：preserve-3d（保留3D位置），flat（不保留3D位置）。该属性在浏览器中支持率不高，具体如下例：div {transform: rotateY(60deg);
          transform-style: preserve-3d;
          -webkit-transform: rotateY(60deg); /* Safari 和 Chrome */
          -webkit-transform-style: preserve-3d; /* Safari 和 Chrome */}
（2）transform属性
transform属性中各种函数可引用至3D转换的函数有：scale3d（x,y,z），scaleX(x)，scaleY(y)，scaleZ(z)；translate3d（x,y,z），translateX（x），translateY（y），translateZ（z）；rotate3d（x，y，z，angle），rotateX（angle），rotateY（angle），rotateZ（angle）。如下例：
.film {transform-style: preserve-3d;     
       -moz-transform-style: preserve-3d;
-webkit-transform-style: preserve-3d; /*.Qcontainer 类中添加的透视声明只会应用到其第一个子元素上,所以设置了一个3D场景*/
-ms-transform-style: preserve-3d;
       transition: 1s;
-webkit-transition: 1s;       
       -moz-transtion: 1s;       
       -ms-transtion: 1s;
      }
.Qcontainer:hover .film {
       -webkit-transform: rotateY(180deg); /*实现翻转效果*/
       transform: rotateY(180deg);
       -moz-transform: rotateY(180deg);
       -moz-backface-visibility: hidden; /* Firefox需要在翻转的时候就判断是否隐藏 */
       -ms-backface-visibility: hidden;
       -ms-transform: rotateY(180deg);
       -webkit-backface-visibility: visible;
       backface-visibility: visible;
   }
（3）perspective属性
perspective属性规定3D元素透视的效果，定义了3D元素距视图的距离，以像素计。当元素定了perspective属性时，子元素实现透视效果，而非本元素。
目前浏览器都不支持perspective属性，Chrome和Safari浏览器支持-webkit-perspective属性。该属性必须与perspective-origin属性一起使用，规定3D元素的底部位置。perspective-origin属性也只有chrome和safari浏览器支持-webkit-perspective-origin属性。如：
div {perspective: 150px;
     perspective-origin: 10% 10%;
     -webkit-perspective: 150px; /* Safari 和 Chrome */
     -webkit-perspective-origin: 10% 10%; /* Safari 和 Chrome */
}
（4）backface-visibility属性
该属性规定了3D元素在背面时是否显示，取值范围是：visible和hidden。各大浏览器厂商需要加前缀，-webkit-backface-visibility，-moz-backface-visibility，-ms-backface-visibility（只有IE 10+支持）。如：
div {backface-visibility: hidden;
-webkit-backface-visibility: hidden; /* Chrome 和 Safari */
-moz-backface-visibility: hidden; /* Firefox */
-ms-backface-visibility: hidden; /* Internet Explorer */
}

八、响应式设计
响应式设计要素包含三个重要方面：（1）媒体查询。是一种CSS语法，可根据浏览器特性，一般是屏幕或浏览器宽度提供规则。（2）流式布局。使用em或百分比等相对单位设置页面宽度，使页面能够随着屏幕大小而缩放。（3）弹性图片。使用相对单位设置图片大小，使其再大也不超过屏幕大小。
响应式设计是为了用户能在不同分辨率的设备上观看同样效果的网页所开发的一种新的布局。响应式布局一般应用在移动端，移动端设备的检测以iPhone系列测试。
（一）JS获取设备宽度
在页面上为了适应不同设备，需要知道设备具体的宽度，根据宽度设置不同的样式布局。以下是iPhone手机分辨率规格表，需要理解物理分辨率和逻辑分辨率，页面一般采用的是逻辑分辨率进行布局。
在页面中通过以下方法获取设备宽度

但是页面输出的值一直是964，因为没有适应移动端设备，可以缩放导致。故需要在head标签中添加<meta />标签，并添加指定的参数，防止用户缩放。
<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no" />
也可使用window.outerWidth/ window.outerHeight 方法获取设备宽高，即屏幕分辨率的宽高。





（二）JS设置等比例缩放字体
也可根据设备宽度设置页面字体、图片等等比例缩放，这需要修改宽度值的单位，推荐使用rem和em。rem是相对根目录font-size大小调整元素内容字体，em是相对父元素font-size大小调整元素内容字体。使用rem会相对简单便捷，易编写维护。
先用JS设置等比缩放的方法，html中设置font-size的比例，方便编写rem为单位的数值转换为px像素，推荐使用font-size:62.5%（浏览器默认为16px，16 * 62.5% =10px，1rem=10px）；
使用JS中resize方法调整元素缩放。
//文字，图片等等比缩放
        $(function () {
            initpage();
            $(window).resize(function () {
                initpage();
            }) 
            function initpage() {
//getBoundingClientRect()返回元素的大小及其相对视口的的位置
                var view_width = document.getElementsByTagName('html')[0].getBoundingClientRect().width;                var _html = document.getElementsByTagName('html')[0];
                view_width > 640 ? _html.style.fontSize = 640 / 16 + 'px' : _html.style.fontSize = view_width / 16 + 'px';
            }
     });
html { -webkit-tap-highlight-color: rgba(0, 0, 0, 0);font-size: 62.5%;font-family: sans-serif; -webkit-text-size-adjust: 100%;-ms-text-size-adjust: 100%; }
 div.s {font-size: 16px; //兼容IE 8（含IE8）以下浏览器
font-size: 0.8rem;}
（三）媒体查询
媒体查询可以使用两种方式来写：@media规则和<link />标签的media属性。
1、@media规则
@media规则可以在样式表或<style>标签中使用CSS媒体查询。
/*只在屏幕宽度不大于568 像素时应用*/
        @media screen and (max-width:568px) {
            .column {
                float: none;
                width: 96%;
                margin: 0 auto;
            }    }
CSS规则可嵌套在媒体查询中，但是媒体查询不能互相嵌套。
2、<link />标签的media属性
（1）媒体类型
all（匹配所有设备）；handled（匹配手持设备，如小屏、单色、宽带有限）；print（匹配分页媒体或打印预览模式下的屏幕）；screen（匹配彩色计算机屏幕）；其他媒体类型还有braille（盲文点字触觉反馈设备）、embossed（盲文分页打印机）、projection（投影仪）、speech（语音合成器）、tty（电话机屏幕等固定宽度字符栅格设备）和tv（电视机）。
（2）媒体特性
媒体特性也是媒体某一方面的特征，一般带有min-或max-前缀。常用的媒体特性有以下几种：
max-device-width和min-device-width：匹配屏幕设备尺寸；
max-width和min-width：匹配视口的宽度，如浏览器的宽度；
orientation：值为portrait（竖屏）和landscape（横屏），匹配设备是横屏还是竖屏。
如果想通过媒体查询来根据用户对浏览器窗口的缩放调整布局，应该使用min-width和max-width。
<link type="text/css" media="print" href="css/print_styles.css" rel="stylesheet"/>
<link type="text/css" media="screen and (max-width:568px)" href="css/iphone_styles.css" rel="stylesheet" />
可使用逻辑运算符and、not、or及关键字only、all组合媒体类型和媒体特性。
only关键字可以用来对不支持媒体查询的浏览器隐藏样式表。
@media only screen and (max-width:1000px) { /*1000 像素的断点*/
            body {
                margin: 0 8;
            }}
对于屏幕的横屏和竖屏同样可以通过max-width或min-width宽度来设置，竖屏时设置屏幕逻辑像素宽度，横屏时设置屏幕逻辑像素宽度（即竖屏时的高度），这样不需要额外添加根据高度设置的样式。
（四）技术提示
1、后备代码
后备代码就是给不支持CSS3 功能的旧版本浏览器提供的一段替代性代码。最简单的后备就是没有后备，如：边框的圆角，在IE6、7浏览器中只会显示方角，这个不影响用户体验，也可以不添加备用代码。但是有些属性需要添加后备代码，如：多背景图展示。 
.someElement {background-image: url(images/basic_image.jpg);}
.someElement {background-image: url(images/cool_image1.jpg), url(images/cool_image2.jpg), url(images/cool_image3.jpg); }
所有浏览器都能理解第一条规则，但只有支持多背景的浏览器才会采用第二条规则。
如果某浏览器无法解析某条CSS 规则，可能是因为它不支持其中的CSS 属性或者声明中包含错误，那么它就会跳过该规则，接着读取下一条规则。
（1）条件注释
如果相对IE浏览器单独设置样式，可通过条件注释来编写后备代码，只有IE浏览器才能识别这段代码，其他浏览器会直接忽略。
<!--[if lte IE 8]>
   <style>
       body {
           color:red;
       }
   </style>
<![endif]-->
上段注释代码表示在IE浏览器中版本小于等于8就将文档中的字体颜色改为红色。
<!--[if !IE ]><!-- -->
        <style>
        body {
           color:green;
       }
        </style> 
   <!-- <![endif]-->
上段注释代码表示非IE的均能识别，文档字体颜色改为绿色。
需要注意的是这种注释代码对IE10、11无效。IE10和IE11会调用非IE条件注释代码。
条件注释[]与前后的注释标签之间不能有空格，如：
<!--[if lte IE 8]> <![endif]-->（正确），<!--[if lte IE 8] > <![endif] -->（错误）

<!--[if !IE]><!--> 除IE外都可识别 <!--<![endif]-->
<!--[if IE]> 所有的IE可识别 <![endif]-->
<!--[if IE 6]> 仅IE6可识别 <![endif]-->
<!--[if lt IE 6]> IE6以及IE6以下版本可识别 <![endif]-->
<!--[if gte IE 6]> IE6以及IE6以上版本可识别 <![endif]-->
<!--[if IE 7]> 仅IE7可识别 <![endif]-->
<!--[if lt IE 7]> IE7以及IE7以下版本可识别 <![endif]-->
<!--[if gte IE 7]> IE7以及IE7以上版本可识别 <![endif]-->
<!--[if IE 8]> 仅IE8可识别 <![endif]-->
<!--[if IE 9]> 仅IE9可识别 <![endif]-->
（2）腻子脚本
腻子脚本（polyfill）指的是一段JavaScript 代码，能够赋予浏览器未曾有过的功能。
2、CSS hack
浏览器兼容性一直是比较麻烦的，以下整理了一些关于CSS hack的语法，主要分为三个部分：媒体查询hack，属性hack，选择器hack。
（1）媒体查询hack
/* 只支持IE6、7 */
@media screen\9 {...} 
/* 只支持IE8 */
@media \0screen {...} 
/* 只支持IE6、7、8 */
@media \0screen\,screen\9 {...} 
/* 只支持IE8、9、10 */
@media screen\0 {...}  
/* 只支持IE9、10 */
@media screen and (min-width:0\0) {...}  
/* 只支持IE10 */
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {...}  
/* 支持IE9、Chrome、Safari、Firefox、 Opera */ 
@media all and (min-width:0){...}  
/* 只支持wekit内核浏览器Chrome、Safari */
@media screen and (-webkit-min-device-pixel-ratio: 0) {...} 
/* 只支持Opera */
@media all and (-webkit-min-device-pixel-ratio: 10000), not all and (-webkit-min-device-pixel-ratio: 0) {...}  
 /* 只支持Firefox */
@-moz-document url-prefix() {...}
如：@media all and (min-width:0) { /* 在IE9文本颜色为红色*/
     .class { color: #F00;} 
    }

    @media screen and (-webkit-min-device-pixel-ratio: 0) { /* 在Chrome、Safari中文本颜色为绿色 */
        .class {color: #0F0;}
    }

    @media all and (-webkit-min-device-pixel-ratio: 10000), not all and (-webkit-min-device-pixel-ratio: 0) { /* 在Opera中文本颜色为蓝色 */
        .class {color: #00F; }
    }

    @-moz-document url-prefix() { /* 在Firefox中文本颜色为品红色 */
        .class {color: #F0F;}
    }
（2）属性hack
/* 只支持IE6、7、8、9、10 */
选择器{属性：属性值\9;} 
/* 只支持IE8、9、10 */
选择器{属性：属性值\0;} 
/* 支持IE8的部分属性值、完全支持IE9、10 */
选择器{属性：属性值\9\0;} 
/* 仅支持IE7和IE6 */
选择器{*属性：属性值;} 
/* 只支持IE6 */
选择器{_属性：属性值;} 
/* 只不支持IE6 */
选择器{属性：属性值!important;} 
/* 仅支持Safari和Chrome ，且只能放在选择器的最后一个属性，因为当浏览器解析[;;]后，不会再读取后面属性 */
选择器{[;属性:属性值;]}
如：.class {
            color: #F00\0; /* 在IE8和IE9中文本颜色为红色 */
            *color: #0F0; /* 在IE7中文本颜色为绿色 */
            _color: #00F; /* IE6中颜色为蓝色 */
            [;color:#F0F;]; /* 在Safari和Chrome中颜色为品红色 */
        }
（3）选择器hack
/* 只支持IE7 */
html* 选择器{}  
/* 仅支持IE7  使用该选择器需要HTML顶部有声明：<!DOCTYPE HTML ......>*/
*+html  选择器{} 
/* 只支持IE6 */
*html  选择器{}
如：html* .class {color: #F00; }/* 在IE7中文本颜色为红色 */
     * + html .class {color: #0F0;}/* 在IE7中文本颜色为绿色 */
     *html .class {color: #00F;}/* 在IE6中文本颜色为蓝色 */




